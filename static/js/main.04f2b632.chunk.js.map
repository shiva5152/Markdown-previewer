{"version":3,"sources":["components/Editor.js","components/data.js","App.js","index.js"],"names":["Editor","useState","input","setInput","btnE","setBtnE","btnP","setBtnP","className","onClick","value","onChange","e","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAwCeA,EA/BA,WACX,MAA0BC,mBCVpB,mjCDUN,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,oBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,oBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAIA,OACI,qCACI,sBAAKC,UAAS,iBAAYJ,EAAO,GAAK,aAAtC,UACI,sBAAKI,UAAU,SAAf,UACA,wCACA,wBAAQA,UAAU,OAAOC,QAAS,WAAKJ,GAASD,IAAhD,SAAyDA,EAAK,cAAC,IAAD,IAAgB,cAAC,IAAD,SAG9E,0BAAUI,UAAU,QAAQE,MAAOR,EAAOS,SAAU,SAACC,GAAQT,EAASS,EAAEC,OAAOH,aAInF,sBAAKF,UAAS,kBAAaF,EAAO,GAAK,aAAvC,UACI,sBAAKE,UAAU,SAAf,UACA,yCACA,wBAAQA,UAAU,OAAOC,QAAS,WAAKF,GAASD,IAAhD,SAAyDA,EAAK,cAAC,IAAD,IAAgB,cAAC,IAAD,SAG9E,qBAAKE,UAAU,SAAf,SAAwB,cAAC,IAAD,UAAgBN,aErBzCY,EAPH,WACR,OAAQ,mCACJ,cAAC,EAAD,OCJRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.04f2b632.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './Editor.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { FaArrowsAlt } from \"react-icons/fa\";\r\nimport { FaCompressAlt } from \"react-icons/fa\";\r\nimport data from \"./data\"\r\n\r\n\r\nconst Editor = () => {\r\n    const [input, setInput] = useState(data);\r\n    const [btnE, setBtnE] = useState(true);\r\n    const [btnP, setBtnP] = useState(true);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`editor ${btnE ? \"\" : \"fullviewE\"}`}>\r\n                <div className=\"header\">\r\n                <h6>Editor</h6>\r\n                <button className=\"icon\" onClick={()=>{setBtnE(!btnE)}}>{btnE?<FaArrowsAlt />:<FaCompressAlt/>}</button>\r\n\r\n                </div>\r\n                <textarea className=\"input\" value={input} onChange={(e) => { setInput(e.target.value) }}></textarea>\r\n\r\n            </div>\r\n\r\n            <div className={`preview ${btnP ? \"\" : \"fullviewP\"}`}>\r\n                <div className=\"header\">\r\n                <h6>preview</h6>\r\n                <button className=\"icon\" onClick={()=>{setBtnP(!btnP)}}>{btnP?<FaArrowsAlt />:<FaCompressAlt/>}</button>\r\n                \r\n                </div>\r\n                <div className=\"output\"><ReactMarkdown>{input}</ReactMarkdown></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Editor;\r\n","const data =`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:`\r\n\r\nexport default data;","import React from 'react';\r\nimport './app.css';\r\nimport Editor from './components/Editor'\r\n\r\n\r\n\r\nconst App = () => {\r\n    return (<>\r\n        <Editor />\r\n        \r\n    </>)\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}